pipeline {
    // This pipeline downloads the latest snapshot version of a WAR file from a Nexus repository,
    // and deploys it to a Tomcat server.
    agent any
    environment {
        // Nexus repository credentials
        NEXUS_URL = 'example.com:8081'
        NEXUS_CREDENTIALS_ID = 'nexus' // Credentials stored in Jenkins
        ARTIFACT_GROUP = 'com.example'
        ARTIFACT_NAME = 'java-tomcat-maven-example'
        SNAPSHOT_VERSION = '1.0-SNAPSHOT'
        SNAPSHOT_VERSION_NUMBER = '1.0'
        ARTIFACT_PACKAGING = 'war'
        NEXUS_REPOSITORY = 'new'
        XML_FILE = 'maven-metadata.xml'
        
        // Tomcat server details
        TOMCAT_USER = 'deployer'
        TOMCAT_HOST = 'example.com'
        TOMCAT_SSH_CREDENTIALS_ID = 'keysaved' // SSH credentials stored in Jenkins
        TOMCAT_WEBAPPS_DIR = '/opt/tomcat/webapps'
    }
    
    stages {
        stage('Download Metadata XML') {
            agent {
                label 'maven'
            }
            steps {
                script {
                    // Construct the metadata URL
                    def metadataUrl = "${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${ARTIFACT_GROUP.replace('.', '/')}/${ARTIFACT_NAME}/${SNAPSHOT_VERSION}/${XML_FILE}"
                    echo "Downloading metadata from ${metadataUrl}"
                    
                    // Download metadata file using credentials
                    withCredentials([usernamePassword(credentialsId: NEXUS_CREDENTIALS_ID, usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASSWORD')]) {
                        sh "wget --user=${NEXUS_USER} --password=${NEXUS_PASSWORD} ${metadataUrl} -O metadata.xml"
                        sh "ls -la"
                    }
                    
                    // Stash the downloaded metadata file
                    stash includes: 'metadata.xml', name: 'metadata'
                }
            }
        }
        
        stage('Parse Metadata and Download Latest WAR') {
            steps {
                script {
                    // Unstash the metadata file
                    unstash 'metadata'
                    sh 'ls -la'
                    
                    // Extract the timestamp from the metadata file
                    def timestamp = sh(script: 'xmllint --xpath \'//snapshotVersion[extension="war"]/value/text()\' metadata.xml', returnStdout: true).trim()
                    
                    echo "Latest snapshot version: ${timestamp}"
                    
                    // Construct the URL for the latest WAR file
                    def artifactUrl = "${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${ARTIFACT_GROUP.replace('.', '/')}/${ARTIFACT_NAME}/${SNAPSHOT_VERSION}/${ARTIFACT_NAME}-${timestamp}.${ARTIFACT_PACKAGING}"
                    
                    echo "Downloading latest WAR from ${artifactUrl}"
                    
                    // Download the latest WAR file using credentials
                    withCredentials([usernamePassword(credentialsId: NEXUS_CREDENTIALS_ID, usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASSWORD')]) {
                        sh "rm -rf *.war"
                        sh "wget --user=${NEXUS_USER} --password=${NEXUS_PASSWORD} ${artifactUrl}"
                    }
                    
                    // Stash the downloaded WAR file
                    stash includes: "*.war", name: 'artifact'
                }
            }
        }
        
        stage('Deploy to Tomcat') {
            agent {
                label 'tomcat'
            }
            steps {
                script {
                    sh 'rm -rf *.war *.jar'
                    unstash 'artifact'
                    echo 'Listing files in workspace after unstash'
                    sh 'ls -l'
                    
                    // Deploy the WAR file to Tomcat
                    sh "sudo rm -rf ${TOMCAT_WEBAPPS_DIR}/*.war"
                    sh "curl -v -u ${TOMCAT_USER}:${TOMCAT_USER} -T *.war http://${TOMCAT_HOST}:8080/manager/text/deploy?path=/&update=true"
                    sh "ls -l ${TOMCAT_WEBAPPS_DIR}"
                }
            }
        }
    }
    
    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
